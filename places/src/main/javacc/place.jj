options
{
  STATIC = false;
}

PARSER_BEGIN(PlaceStringParser)
package com.colinalworth.gwt.places.vm;

public class PlaceStringParser {
    private static class Var {
        String name;
        boolean optional;
    }
    private PlaceStringModel model;


}
PARSER_END(PlaceStringParser)

< DEFAULT > TOKEN:
{
  <SLASH: "/">
| <BEGIN_QUERY: "?">
| <AMPERSAND: "&">
| <EQUALS: "=">
| <L_BRACE: "{" > : IDENTIFIER_EXPECTED
| <URL_STRING: (["A"-"Z","a"-"z","0"-"9"])+ >
}

< IDENTIFIER_EXPECTED > TOKEN:
{
  <IDENTIFIER: (["A"-"Z","a"-"z"] (["A"-"Z","a"-"z","0"-"9"])*) >
| <OPTIONAL_PARAM: "?">
| <R_BRACE: "}"> : DEFAULT
}

PlaceStringModel url():
{ model = new PlaceStringModel(); }
{
  (path())? (<SLASH> { model.setRequiresTrailingSlash(true); } )? (querystring())? <EOF>
  { return model; }
}

void path():
{}
{  pathComponent() ( LOOKAHEAD(2) <SLASH> pathComponent() )* }

void pathComponent():
{ PlaceStringModel.PathComponent path; }
{
  (
    (<URL_STRING>) { path = new PlaceStringModel.PathConstant(token.image); }
  | path = pathVariable()
  )

  { model.getPath().add(path); }
}

PlaceStringModel.PathVariable pathVariable():
{ Var var; }
{ var = variable()
  { return new PlaceStringModel.PathVariable(var.name, var.optional); }
}

void querystring():
{ PlaceStringModel.QueryVariable var; }
{ <BEGIN_QUERY> (var = pair() { model.getQuery().add(var); } (<AMPERSAND> var = pair() { model.getQuery().add(var); } )*)? /*(<AMPERSAND>)?*/ }

PlaceStringModel.QueryVariable pair():
{ String key; Var var;}
{ <URL_STRING> { key = token.image; } <EQUALS> var = queryVariable()
  { return new PlaceStringModel.QueryVariable(key, var.name, var.optional); }
}

Var queryVariable():
{ Var var; }
{ var = variable()
  { return var; }
}

Var variable():
{ Var var = new Var(); }
{ <L_BRACE> <IDENTIFIER> { var.name = token.image; } (<OPTIONAL_PARAM> { var.optional = true; })? <R_BRACE>
  { return var; }
}
